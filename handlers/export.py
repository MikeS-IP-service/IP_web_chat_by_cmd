import os
from telegram import Update
from telegram.ext import CallbackContext
from services.excel_service import ExcelExportService
from config.settings import BOT_CONFIG
from utils.keyboards import Keyboards

excel_service = ExcelExportService()
keyboards = Keyboards()

async def handle_export_buttons(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    is_admin = user.id in BOT_CONFIG.ADMIN_IDS
    
    if query.data == "export_my_excel":
        await export_my_bookings(update, context)
    elif query.data == "export_all_excel":
        await export_all_bookings(update, context)
    elif query.data == "main_menu":
        from handlers.start import main_menu
        await main_menu(update, context)
    elif query.data == "exit_chat":
        from handlers.start import exit_chat
        await exit_chat(update, context)

async def export_my_bookings(update: Update, context: CallbackContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user = query.from_user
    is_admin = user.id in BOT_CONFIG.ADMIN_IDS
    
    try:
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª Excel —Å –≤–∞—à–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏...")
        
        filepath = excel_service.export_user_bookings_to_excel(user.id)
        
        with open(filepath, 'rb') as file:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file,
                filename=os.path.basename(filepath),
                caption="‚úÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel"
            )
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu(is_admin=is_admin)
        )
        
    except Exception as e:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboards.get_main_menu(is_admin=is_admin)
        )

async def export_all_bookings(update: Update, context: CallbackContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    query = update.callback_query
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id not in BOT_CONFIG.ADMIN_IDS:
        await query.edit_message_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=keyboards.get_main_menu()
        )
        return
    
    try:
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª Excel —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏...")
        
        filepath = excel_service.export_bookings_to_excel()
        
        with open(filepath, 'rb') as file:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file,
                filename=os.path.basename(filepath),
                caption="‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel"
            )
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboards.get_main_menu(is_admin=True)
        )
        
    except Exception as e:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=keyboards.get_main_menu(is_admin=True)
        )