from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler, CallbackQueryHandler, MessageHandler, filters
from utils.keyboards import Keyboards
from services.booking_service import BookingService
from services.excel_service import ExcelExportService
from config.settings import BOT_CONFIG
import os

keyboards = Keyboards()
booking_service = BookingService()
excel_service = ExcelExportService()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
ADMIN_SEARCH_PHONE = 0

async def show_admin_panel(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id not in BOT_CONFIG.ADMIN_IDS:
        await query.edit_message_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            reply_markup=keyboards.get_main_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_bookings = booking_service.get_all_bookings()
    total_bookings = len(all_bookings)
    
    admin_text = f"""
üëë –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_bookings}
‚Ä¢ –£—Å–ª—É–≥ –æ–∫–∞–∑–∞–Ω–æ: {total_bookings}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_bookings}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ Excel
‚Ä¢ üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ —á–∞—Ç–µ  
‚Ä¢ üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π
‚Ä¢ üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
"""
    
    await query.edit_message_text(
        admin_text,
        reply_markup=keyboards.get_admin_menu()
    )

async def handle_admin_buttons(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user.id not in BOT_CONFIG.ADMIN_IDS:
        await query.edit_message_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboards.get_main_menu()
        )
        return
    
    if query.data == "admin_export_all":
        await admin_export_all_bookings(update, context)
    
    elif query.data == "admin_view_all":
        await admin_view_all_bookings(update, context)
    
    elif query.data == "admin_stats":
        await admin_show_stats(update, context)
    
    elif query.data == "admin_search_phone":
        await admin_start_search_phone(update, context)
    
    elif query.data == "admin_cleanup":
        await admin_cleanup_exports(update, context)
    
    elif query.data == "admin_panel":
        await show_admin_panel(update, context)
    
    elif query.data == "main_menu":
        from handlers.start import main_menu
        await main_menu(update, context)

async def admin_export_all_bookings(update: Update, context: CallbackContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    query = update.callback_query
    
    try:
        await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª Excel —Å–æ –≤—Å–µ–º–∏ –∑–∞–ø–∏—Å—è–º–∏...")
        
        filepath = excel_service.export_bookings_to_excel()
        
        with open(filepath, 'rb') as file:
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=file,
                filename=os.path.basename(filepath),
                caption="‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel"
            )
        
        await query.message.reply_text(
            "üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!",
            reply_markup=keyboards.get_admin_back_menu()
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}",
            reply_markup=keyboards.get_admin_back_menu()
        )

async def admin_view_all_bookings(update: Update, context: CallbackContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ —á–∞—Ç–µ"""
    query = update.callback_query
    
    try:
        all_bookings = booking_service.get_all_bookings()
        
        if not all_bookings:
            await query.edit_message_text(
                "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.",
                reply_markup=keyboards.get_admin_back_menu()
            )
            return
        
        response = "üë• –í–°–ï –ó–ê–ü–ò–°–ò –í –°–ò–°–¢–ï–ú–ï:\n\n"
        
        for i, booking in enumerate(all_bookings, 1):
            client_name, service_type, booking_date, booking_time, client_phone, created_at = booking
            service_name = booking_service.get_service_name(service_type)
            
            response += f"""
üìã –ó–∞–ø–∏—Å—å #{i}
–£—Å–ª—É–≥–∞: {service_name}
–î–∞—Ç–∞: {booking_date}
–í—Ä–µ–º—è: {booking_time}
–ö–ª–∏–µ–Ω—Ç: {client_name}
–¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}
–°–æ–∑–¥–∞–Ω–∞: {created_at}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(response) > 3000:
                await query.edit_message_text(response)
                response = ""
        
        response += f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_bookings)}"
        
        await query.edit_message_text(
            response,
            reply_markup=keyboards.get_admin_back_menu()
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {str(e)}",
            reply_markup=keyboards.get_admin_back_menu()
        )

async def admin_show_stats(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
    query = update.callback_query
    
    try:
        all_bookings = booking_service.get_all_bookings()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        services_count = {}
        dates_count = {}
        
        for booking in all_bookings:
            client_name, service_type, booking_date, booking_time, client_phone, created_at = booking
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º
            services_count[service_type] = services_count.get(service_type, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
            dates_count[booking_date] = dates_count.get(booking_date, 0) + 1
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        stats_text = "üìà –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        stats_text += f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_bookings)}\n\n"
        
        stats_text += "üìã –ü–æ —É—Å–ª—É–≥–∞–º:\n"
        for service, count in services_count.items():
            service_name = booking_service.get_service_name(service)
            stats_text += f"‚Ä¢ {service_name}: {count} –∑–∞–ø–∏—Å–µ–π\n"
        
        stats_text += "\nüìÖ –ü–æ –¥–∞—Ç–∞–º:\n"
        for date, count in list(dates_count.items())[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–∞—Ç
            stats_text += f"‚Ä¢ {date}: {count} –∑–∞–ø–∏—Å–µ–π\n"
        
        if len(dates_count) > 10:
            stats_text += f"‚Ä¢ ... –∏ –µ—â–µ {len(dates_count) - 10} –¥–∞—Ç\n"
        
        await query.edit_message_text(
            stats_text,
            reply_markup=keyboards.get_admin_back_menu()
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=keyboards.get_admin_back_menu()
        )

async def admin_start_search_phone(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ —á–∞—Å—Ç—å –Ω–æ–º–µ—Ä–∞):",
        reply_markup=keyboards.get_admin_back_menu()
    )
    
    return ADMIN_SEARCH_PHONE

async def admin_search_phone(update: Update, context: CallbackContext):
    """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_query = update.message.text.strip()
    
    try:
        all_bookings = booking_service.get_all_bookings()
        found_bookings = []
        
        for booking in all_bookings:
            client_name, service_type, booking_date, booking_time, client_phone, created_at = booking
            if phone_query in client_phone:
                found_bookings.append(booking)
        
        if not found_bookings:
            await update.message.reply_text(
                f"‚ùå –ó–∞–ø–∏—Å–µ–π —Å –Ω–æ–º–µ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{phone_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=keyboards.get_admin_back_menu()
            )
            return ConversationHandler.END
        
        response = f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ø–æ '{phone_query}':\n\n"
        
        for i, booking in enumerate(found_bookings, 1):
            client_name, service_type, booking_date, booking_time, client_phone, created_at = booking
            service_name = booking_service.get_service_name(service_type)
            
            response += f"""
üìã –ó–∞–ø–∏—Å—å #{i}
–£—Å–ª—É–≥–∞: {service_name}
–î–∞—Ç–∞: {booking_date}
–í—Ä–µ–º—è: {booking_time}
–ö–ª–∏–µ–Ω—Ç: {client_name}
–¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}
–°–æ–∑–¥–∞–Ω–∞: {created_at}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
        
        response += f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(found_bookings)}"
        
        await update.message.reply_text(
            response,
            reply_markup=keyboards.get_admin_back_menu()
        )
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
            reply_markup=keyboards.get_admin_back_menu()
        )
    
    return ConversationHandler.END

async def admin_cleanup_exports(update: Update, context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    query = update.callback_query
    
    try:
        excel_service.cleanup_old_exports(days_old=1)  # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
        
        await query.edit_message_text(
            "üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=keyboards.get_admin_back_menu()
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}",
            reply_markup=keyboards.get_admin_back_menu()
        )

# ConversationHandler –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
admin_search_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(admin_start_search_phone, pattern="^admin_search_phone$")],
    states={
        ADMIN_SEARCH_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_search_phone)]
    },
    fallbacks=[
        CallbackQueryHandler(show_admin_panel, pattern="^admin_panel$")
    ],
    map_to_parent={
        ConversationHandler.END: ConversationHandler.END
    }
)